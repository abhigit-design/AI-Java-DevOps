name: Java Maven CI/CD Pipeline

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  ai_code_review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: pip install --upgrade openai

      - name: Generate PR Changes Summary (pr_changes.txt)
        run: |
          git fetch origin main  # Fetch latest changes from main branch
          git diff --name-status origin/main > pr_changes.txt
          cat pr_changes.txt
          
      - name: Send Teams Notification for PR Changes
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "text": "ðŸš€ *PR Created* ðŸš€\n\nPR has been created. Developer, please review the following changes before approving:\n\n'$(cat pr_changes.txt)'\n\nOnce reviewed, approve the PR to proceed with full code review."
          }' ${{ secrets.TEAMS_WEBHOOK_URL }}

  manual_approval_for_pr:
    needs: ai_code_review
    runs-on: ubuntu-latest
    environment: pr-approval-required  # Enforce manual approval via GitHub Environments
    steps:
      - name: Pause for PR Approval
        run: echo "Waiting for developer's PR approval in GitHub UI..."

  ai_full_code_review:
    needs: manual_approval_for_pr
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: pip install --upgrade openai

      - name: Run Full Code Review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python scripts/ai_code_review_full.py

      - name: Upload Full Code Review Report
        uses: actions/upload-artifact@v4
        with:
          name: full-code-review-report
          path: full_code_review_report.txt  # Store the report for reference

      - name: Add Full Code Review Comments to PR
        run: |
          FULL_REVIEW_RESULTS=$(cat full_code_review_report.txt)
          curl -X POST -H "Content-Type: application/json" -d '{
            "body": "Full Code Review Results: \n\n'"${FULL_REVIEW_RESULTS}"'\n\nPlease address any issues before merging."
          }' https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  manual_approval_for_full_review:
    needs: ai_full_code_review
    runs-on: ubuntu-latest
    environment: full-review-approval-required  # Enforce manual approval for full review step
    steps:
      - name: Pause for Full Code Review Approval
        run: echo "Waiting for developer's approval after full code review in GitHub UI..."

  ai_test_generation:
    needs: manual_approval_for_full_review  # Requires full code review approval
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: pip install openai pytest

      - name: Ensure Test Directory Exists
        run: mkdir -p src/test/java/  # Make sure the directory is created

      - name: Generate AI-Based Unit Tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python scripts/ai_test_generator.py

      - name: Verify Test Files Exist
        run: ls -la src/test/java/

      - name: Upload Tests as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-tests
          path: src/test/java  # Ensure tests are uploaded for the next job

  build_and_test:
    needs: ai_test_generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Download Generated Tests
        uses: actions/download-artifact@v4  # Download the artifact created in ai_test_generation
        with:
          name: generated-tests
          path: src/test/java  # Download to the same path

      - name: Build with Maven
        run: mvn clean package

      - name: Run Tests
        run: mvn test

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-artifact
          path: target/*.jar
